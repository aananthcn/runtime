#! /usr/bin/python3

import sys
import json
import subprocess
import os

# G L O B A L   V A R I A B L E S
rbs_conf = rbs_cmd = ""
supported_commands = ["clean", "install"]
package_types = ["cmake", "makefile", "boost"]


# F U N C T I O N S
def get_package_type(pkgd):
    files = subprocess.run(["ls", pkgd], stdout=subprocess.PIPE).stdout.decode('utf-8').split("\n")
    if "Makefile" in files or "makefile" in files:
        return "makefile"
    elif "CMakeLists.txt" in files:
        return "cmake"
    elif "bootstrap.sh" in files and "boost-build.jam" in files:
        return "boost"
    else:
        print("RBS Error: Unknown package type found %s" % (pkgd))
        exit(-1)


def command_check(cmd):
    if cmd in supported_commands:
        return True
    else:
        return False


def out_folder_paths(domain, pwd):
    out_dir = pwd + "/out/" + domain
    bin_dir = out_dir + "/bin/"
    lib_dir = out_dir + "/lib/"
    return out_dir, bin_dir, lib_dir


def prepare_env_n_dir(conf, domain):
    # copy host environment and add the envs from json file
    env = os.environ.copy()
    for v in conf["toolchain"][domain]["env"]:
        env[v] = conf["toolchain"][domain]["env"][v]

    # create out folders and to env variable
    out_dir, bin_dir, lib_dir = out_folder_paths(domain, env["PWD"])
    subprocess.run(["mkdir", "-p", bin_dir, lib_dir])
    env["OUT_DIR"] = out_dir
    env["BIN_DIR"] = bin_dir
    env["LIB_DIR"] = lib_dir
    return env



def build_domain_packages(conf, domain, pkgs, cmd):
    print("\n\nRBS begins for %s..." % (domain))
    print("=" * (18+len(domain)))
    env = prepare_env_n_dir(conf, domain)

    # setup path & domain
    env["DOMAIN"] = domain
    if len(conf["toolchain"][domain]["path"]) > 0:
        env["PATH"] = conf["toolchain"][domain]["path"] + ":" + env["PATH"]

    # build packages for domain (QNX, Linux, ...)
    for pkg in pkgs:
        # identify package type
        print("\nStarting package: " + pkg)
        print("~" * (18+len(pkg)))
        pkgd = conf["packages"]["path"]+"/"+pkg
        pkgt = get_package_type(pkgd)
        print("Package type: " + pkgt)

        if pkgt == "makefile":
            import makefile as rbs_mod
        elif pkgt == "boost":
            import boost as rbs_mod
        elif pkgt == "cmake":
            import cmake as rbs_mod
        else:
            rbs_mod = None
            print("RBS Error: unsupported Package Type identified!")
            exit(-1)

        # execute build steps...
        if len(cmd) > 0:
            rbs_mod.run_package(conf, env, pkg, cmd)
        else:
            rbs_mod.config_package(conf, env, pkg)
            rbs_mod.compile_package(conf, env, pkg)
            rbs_mod.install_package(conf, env, pkg)


def build_packages(conf, pkgs, cmd):
    for domain in conf["domains"]:
        if domain == "QNX":
            build_domain_packages(conf, domain, pkgs, cmd)
            continue

        if domain == "Linux":
            build_domain_packages(conf, domain, pkgs, cmd)
            continue

        # control shouldn't reach here
        print("RBS error: unsupported domain build configured: %s" % (domain))


if __name__ == '__main__':
    cmd_args = len(sys.argv)
    if cmd_args > 1:
        for i in range(1, cmd_args):
            if sys.argv[i] == "-c" and (i+1) <= cmd_args:
                rbs_cmd = sys.argv[i+1]
                i += 1
                cmdchk = command_check(rbs_cmd);
                if cmdchk == True:
                    continue
                else:
                    print("RBS Error: %s is not supported!" % (rbs_cmd))
                    exit(-1)
    else:
        print("usage:\n"+sys.argv[0]+" <rbs.json file>\n")
        exit(-1)

    # load RBS configuration from JSON file
    print("Loading %s..." % (sys.argv[1]))
    rbs_conf = json.load(open(sys.argv[1])) # Load the json file
    print("")
    print("Welcome to RBS - Runtime Build System!")
    print("%s is configured for the domain targets: %s" % (rbs_conf["title"], rbs_conf["domains"]))

    # identify the packages to be built
    print("\nPackages to be built:")
    packages = []
    for item in rbs_conf["packages"]["list"]:
        packages.append(item["pkg"])
    print(packages)

    # build packages for all domains...
    build_packages(rbs_conf, packages, rbs_cmd)