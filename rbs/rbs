#! /usr/bin/python3

import sys
import json
import subprocess
import os

import sstate
import cgen

# G L O B A L   V A R I A B L E S
rbs_conf = rbs_cmd = ""
supported_commands = ["clean", "install"]
supported_pkgtypes = ["cmake", "makefile", "boost"]
supported_domains  = ["Linux", "QNX"]


# F U N C T I O N S
def print_build_complete_msg(msg):
    print("#" * (len(msg)+10))
    print("##   %s   ##" % (msg))
    print("#" * (len(msg)+10))


def print_domain_separator(domain):
    print("=" * (90))
    print("Domain Name: %s" % domain)
    print("~" * (13+len(domain)))



def get_package_type(pkgd):
    files = subprocess.run(["ls", pkgd], stdout=subprocess.PIPE).stdout.decode('utf-8').split("\n")
    if "Makefile" in files or "makefile" in files:
        return "makefile"
    elif "CMakeLists.txt" in files:
        return "cmake"
    elif "bootstrap.sh" in files and "boost-build.jam" in files:
        return "boost"
    else:
        print("RBS Error: Unknown package type found %s" % (pkgd))
        exit(-1)


def command_check(cmd):
    if cmd in supported_commands:
        return True
    else:
        return False


def out_folder_paths(domain, pwd):
    tmp_dir = pwd + "/tmp"
    out_dir = pwd + "/out/" + domain
    bin_dir = out_dir + "/bin/"
    lib_dir = out_dir + "/lib/"
    return tmp_dir, out_dir, bin_dir, lib_dir


def prepare_env_n_dir(conf, domain):
    # copy host environment and add the envs from json file
    env = os.environ.copy()
    for v in conf["toolchain"]["env"]:
        env[v] = conf["toolchain"]["env"][v]

    # create out folders and to env variable
    tmp_dir, out_dir, bin_dir, lib_dir = out_folder_paths(domain, env["PWD"])
    subprocess.run(["mkdir", "-p", tmp_dir, bin_dir, lib_dir])
    env["OUT_DIR"] = out_dir
    env["BIN_DIR"] = bin_dir
    env["LIB_DIR"] = lib_dir
    env["TMP_DIR"] = tmp_dir
    return env



def get_rbs_module_for_build(pkgt, domain):
    if pkgt not in supported_pkgtypes:
        print("RBS Error: unsupported Package Type \"%s\" identified!" % (pkgt))
        exit(-1)

    if domain not in supported_domains:
        print("RBS Error: unsupported Domain Name \"%s\" passed!" % (domain))
        exit(-1)

    # identify the right module to make future function calls
    rbs_mod = None
    if pkgt == "makefile":
        if domain == "QNX":
            from qnx import makefile as rbs_mod
        elif domain == "Linux":
            from linux import makefile as rbs_mod
    elif pkgt == "boost":
        if domain == "QNX":
            from qnx import boost as rbs_mod
        elif domain == "Linux":
            from linux import boost as rbs_mod
    elif pkgt == "cmake":
        if domain == "QNX":
            from qnx import cmake as rbs_mod
        elif domain == "Linux":
            from linux import cmake as rbs_mod

    return rbs_mod



def build_domain_packages(dconf, domain, pkgs, cmd):
    print("\n")
    print("~" * (18+len(domain)))
    print("RBS begins for %s..." % (domain))
    print("~" * (18+len(domain)))
    env = prepare_env_n_dir(dconf, domain)

    # setup path & domain
    env["DOMAIN"] = domain
    if len(dconf["toolchain"]["path"]) > 0:
        env["PATH"] = dconf["toolchain"]["path"] + ":" + env["PATH"]

    # build packages for domain (QNX, Linux, ...)
    for pkg in pkgs:
        # identify package type
        print("\nStarting package: " + pkg)
        print("-" * (18+len(pkg)))
        pkgd = dconf["packages"]["path"] + "/" + pkg
        if os.path.exists(pkgd) == False:
            print("Package \"%s\" can't be reached at path \"%s\"! Aborting!" % (pkg, pkgd))
            exit(-1)
        pkgt = get_package_type(pkgd)
        print("Package type: " + pkgt)

        # check fidl scripts and do code generation
        rbs_func = "codegen"
        cconf = {**rbs_conf["code-gen"], **dconf}
        if sstate.sstate_check(env, pkg, rbs_func) == False:
            if cgen.cgen_fidl_package(cconf, env, pkg) == True:
                sstate.sstate_done(env, pkg, rbs_func)
            else:
                exit(-1)
        else:
            print("Operation[\"%s\"] for package \"%s\" is skipped as it was done already!" % (rbs_func, pkg))


        # get module object to make function calls
        rbs_mod = get_rbs_module_for_build(pkgt, domain)

        # execute build steps...
        if len(cmd) > 0:
            rbs_mod.run_package(dconf, env, pkg, cmd)
        else:
            # patch the package
            rbs_func = "patch"
            # TBD

            # configure package
            rbs_func = "config"
            if sstate.sstate_check(env, pkg, rbs_func) == False:
                if rbs_mod.config_package(dconf, env, pkg) == True:
                    sstate.sstate_done(env, pkg, rbs_func)
                else:
                    exit(-1)
            else:
                print("Operation[\"%s\"] for package \"%s\" is skipped as it was done already!" % (rbs_func, pkg))

            # compile package
            rbs_func = "compile"
            if sstate.sstate_check(env, pkg, rbs_func) == False:
                if rbs_mod.compile_package(dconf, env, pkg) == True:
                    sstate.sstate_done(env, pkg, rbs_func)
                else:
                    exit(-1)
            else:
                print("Operation[\"%s\"] for package \"%s\" is skipped as it was done already!" % (rbs_func, pkg))

            # install package
            rbs_func = "install"
            if sstate.sstate_check(env, pkg, rbs_func) == False:
                if rbs_mod.install_package(dconf, env, pkg) == True:
                    sstate.sstate_done(env, pkg, rbs_func)
                else:
                    exit(-1)
            else:
                print("Operation[\"%s\"] for package \"%s\" is skipped as it was done already!" % (rbs_func, pkg))

    # end of function
    print("\n")



def build_packages(conf, cmd):
    domain_index = -1
    for domain in conf["domains"]:
        domain_index += 1
        print_domain_separator(domain["name"])

        # identify the packages to be built
        print("\nPackages to be built for %s:" % (domain["name"]))
        packages = []
        for item in domain["packages"]["list"]:
            packages.append(item["pkg"])

        if len(packages) == 0:
            print("No package configured for %s domain, skipping..." % (domain["name"]))
            continue
        else:
            print(packages)

        build_domain_packages(domain, domain["name"], packages, cmd)


if __name__ == '__main__':
    cmd_args = len(sys.argv)
    if cmd_args > 1:
        for i in range(1, cmd_args):
            if sys.argv[i] == "-c" and (i+1) <= cmd_args:
                rbs_cmd = sys.argv[i+1]
                i += 1
                cmdchk = command_check(rbs_cmd);
                if cmdchk == True:
                    continue
                else:
                    print("RBS Error: %s is not supported!" % (rbs_cmd))
                    exit(-1)
    else:
        print("usage:\n"+sys.argv[0]+" <rbs.json file>\n")
        exit(-1)

    # load RBS configuration from JSON file
    print("Loading %s...\n" % (sys.argv[1]))
    rbs_conf = json.load(open(sys.argv[1])) # Load the json file
    print("=" * (90))
    print("Welcome to RBS - Runtime Build System!")
    rbs_domains = []
    for domain in rbs_conf["domains"]:
        rbs_domains.append(domain["name"])
    print("%s is configured for the domain targets: %s" % (rbs_conf["title"], rbs_domains))

    # build packages for all domains...
    build_packages(rbs_conf, rbs_cmd)
    print_build_complete_msg("Build succeeded!")
